<!-- POTENTIAL IMPROVEMENTS: 
1) add a button to show/hide completed tasks
2) make asynchronus updates to the list
3) add a button to mark a task as completed (V)
4) add search functionality (V)
5) add a button to delete all completed tasks
-->

@model IEnumerable<ToDoList.Models.Todo>

@{
    ViewData["Title"] = "Tasks";
    var pendingTasks = Model.Where(t => !t.IsDone).ToList();
    var completedTasks = Model.Where(t => t.IsDone).ToList();
}

<h1>Tasks</h1>

<form asp-controller="Todo" asp-action="Index" method="get" class="mb-4">
    <div class="input-group">
        <input type="text" class="form-control" name="SearchString" placeholder="Search by description..." />
        <button class="btn btn-outline-secondary" type="submit">
            <i class="bi bi-search"></i> Filter
        </button>
    </div>
</form>

<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center bg-light">
        <h4 class="mb-0">Pending Tasks (@pendingTasks.Count)</h4>
        <a asp-controller="Todo" asp-action="Create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Add New Task
        </a>
    </div>
    <div class="card-body">
        @if (pendingTasks.Any())
        {
            <partial name="_TodoTable" model="pendingTasks" />
        }
        else
        {
            <p class="text-muted">No pending tasks. Great job!</p>
        }
    </div>
</div>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center bg-light">
        <h4 class="mb-0">Completed Tasks (@completedTasks.Count)</h4>
        <!-- Add button for clearing completed tasks in future -->
    </div>
    <div class="card-body">
        @if (completedTasks.Any())
        {
            <partial name="_TodoTable" model="completedTasks" />
        }
        else
        {
            <p class="text-muted">No completed tasks yet.</p>
        }
    </div>
</div>
